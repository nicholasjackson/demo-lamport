// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/server/v1/server.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/nicholasjackson/demo-lamport/byzantine_generals/gen/proto/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CommanderServiceName is the fully-qualified name of the CommanderService service.
	CommanderServiceName = "proto.server.v1.CommanderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CommanderServiceResetProcedure is the fully-qualified name of the CommanderService's Reset RPC.
	CommanderServiceResetProcedure = "/proto.server.v1.CommanderService/Reset"
	// CommanderServiceIssueCommandProcedure is the fully-qualified name of the CommanderService's
	// IssueCommand RPC.
	CommanderServiceIssueCommandProcedure = "/proto.server.v1.CommanderService/IssueCommand"
	// CommanderServiceCommandSentProcedure is the fully-qualified name of the CommanderService's
	// CommandSent RPC.
	CommanderServiceCommandSentProcedure = "/proto.server.v1.CommanderService/CommandSent"
	// CommanderServiceDecisionMadeProcedure is the fully-qualified name of the CommanderService's
	// DecisionMade RPC.
	CommanderServiceDecisionMadeProcedure = "/proto.server.v1.CommanderService/DecisionMade"
	// CommanderServiceNodesProcedure is the fully-qualified name of the CommanderService's Nodes RPC.
	CommanderServiceNodesProcedure = "/proto.server.v1.CommanderService/Nodes"
	// CommanderServiceEdgesProcedure is the fully-qualified name of the CommanderService's Edges RPC.
	CommanderServiceEdgesProcedure = "/proto.server.v1.CommanderService/Edges"
	// CommanderServiceDecisionsProcedure is the fully-qualified name of the CommanderService's
	// Decisions RPC.
	CommanderServiceDecisionsProcedure = "/proto.server.v1.CommanderService/Decisions"
)

// CommanderServiceClient is a client for the proto.server.v1.CommanderService service.
type CommanderServiceClient interface {
	// Reset resets the state of the generals and commanders
	Reset(context.Context, *connect.Request[v1.EmptyRequest]) (*connect.Response[v1.EmptyResponse], error)
	// IssueCommand sends a command to the generals
	IssueCommand(context.Context, *connect.Request[v1.EmptyRequest]) (*connect.Response[v1.CommandResponse], error)
	// SentCommand sent command is sent by the generals when they send a command to another
	// general, it allows us to track the commands sent and update the UI
	CommandSent(context.Context, *connect.Request[v1.CommandSentRequest]) (*connect.Response[v1.CommandResponse], error)
	// DecisionMade is called when a decision has been made by the generals
	DecisionMade(context.Context, *connect.Request[v1.Decision]) (*connect.Response[v1.EmptyResponse], error)
	// Returns the nodes in the graph, used by the UI
	Nodes(context.Context, *connect.Request[v1.EmptyRequest]) (*connect.Response[v1.NodesResponse], error)
	// Returns the edges in the graph, used by the UI
	Edges(context.Context, *connect.Request[v1.EmptyRequest]) (*connect.Response[v1.EdgesResponse], error)
	// Returns the decisions made by the generals
	Decisions(context.Context, *connect.Request[v1.DecisionsRequest]) (*connect.Response[v1.DecisionsResponse], error)
}

// NewCommanderServiceClient constructs a client for the proto.server.v1.CommanderService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCommanderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CommanderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	commanderServiceMethods := v1.File_proto_server_v1_server_proto.Services().ByName("CommanderService").Methods()
	return &commanderServiceClient{
		reset: connect.NewClient[v1.EmptyRequest, v1.EmptyResponse](
			httpClient,
			baseURL+CommanderServiceResetProcedure,
			connect.WithSchema(commanderServiceMethods.ByName("Reset")),
			connect.WithClientOptions(opts...),
		),
		issueCommand: connect.NewClient[v1.EmptyRequest, v1.CommandResponse](
			httpClient,
			baseURL+CommanderServiceIssueCommandProcedure,
			connect.WithSchema(commanderServiceMethods.ByName("IssueCommand")),
			connect.WithClientOptions(opts...),
		),
		commandSent: connect.NewClient[v1.CommandSentRequest, v1.CommandResponse](
			httpClient,
			baseURL+CommanderServiceCommandSentProcedure,
			connect.WithSchema(commanderServiceMethods.ByName("CommandSent")),
			connect.WithClientOptions(opts...),
		),
		decisionMade: connect.NewClient[v1.Decision, v1.EmptyResponse](
			httpClient,
			baseURL+CommanderServiceDecisionMadeProcedure,
			connect.WithSchema(commanderServiceMethods.ByName("DecisionMade")),
			connect.WithClientOptions(opts...),
		),
		nodes: connect.NewClient[v1.EmptyRequest, v1.NodesResponse](
			httpClient,
			baseURL+CommanderServiceNodesProcedure,
			connect.WithSchema(commanderServiceMethods.ByName("Nodes")),
			connect.WithClientOptions(opts...),
		),
		edges: connect.NewClient[v1.EmptyRequest, v1.EdgesResponse](
			httpClient,
			baseURL+CommanderServiceEdgesProcedure,
			connect.WithSchema(commanderServiceMethods.ByName("Edges")),
			connect.WithClientOptions(opts...),
		),
		decisions: connect.NewClient[v1.DecisionsRequest, v1.DecisionsResponse](
			httpClient,
			baseURL+CommanderServiceDecisionsProcedure,
			connect.WithSchema(commanderServiceMethods.ByName("Decisions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// commanderServiceClient implements CommanderServiceClient.
type commanderServiceClient struct {
	reset        *connect.Client[v1.EmptyRequest, v1.EmptyResponse]
	issueCommand *connect.Client[v1.EmptyRequest, v1.CommandResponse]
	commandSent  *connect.Client[v1.CommandSentRequest, v1.CommandResponse]
	decisionMade *connect.Client[v1.Decision, v1.EmptyResponse]
	nodes        *connect.Client[v1.EmptyRequest, v1.NodesResponse]
	edges        *connect.Client[v1.EmptyRequest, v1.EdgesResponse]
	decisions    *connect.Client[v1.DecisionsRequest, v1.DecisionsResponse]
}

// Reset calls proto.server.v1.CommanderService.Reset.
func (c *commanderServiceClient) Reset(ctx context.Context, req *connect.Request[v1.EmptyRequest]) (*connect.Response[v1.EmptyResponse], error) {
	return c.reset.CallUnary(ctx, req)
}

// IssueCommand calls proto.server.v1.CommanderService.IssueCommand.
func (c *commanderServiceClient) IssueCommand(ctx context.Context, req *connect.Request[v1.EmptyRequest]) (*connect.Response[v1.CommandResponse], error) {
	return c.issueCommand.CallUnary(ctx, req)
}

// CommandSent calls proto.server.v1.CommanderService.CommandSent.
func (c *commanderServiceClient) CommandSent(ctx context.Context, req *connect.Request[v1.CommandSentRequest]) (*connect.Response[v1.CommandResponse], error) {
	return c.commandSent.CallUnary(ctx, req)
}

// DecisionMade calls proto.server.v1.CommanderService.DecisionMade.
func (c *commanderServiceClient) DecisionMade(ctx context.Context, req *connect.Request[v1.Decision]) (*connect.Response[v1.EmptyResponse], error) {
	return c.decisionMade.CallUnary(ctx, req)
}

// Nodes calls proto.server.v1.CommanderService.Nodes.
func (c *commanderServiceClient) Nodes(ctx context.Context, req *connect.Request[v1.EmptyRequest]) (*connect.Response[v1.NodesResponse], error) {
	return c.nodes.CallUnary(ctx, req)
}

// Edges calls proto.server.v1.CommanderService.Edges.
func (c *commanderServiceClient) Edges(ctx context.Context, req *connect.Request[v1.EmptyRequest]) (*connect.Response[v1.EdgesResponse], error) {
	return c.edges.CallUnary(ctx, req)
}

// Decisions calls proto.server.v1.CommanderService.Decisions.
func (c *commanderServiceClient) Decisions(ctx context.Context, req *connect.Request[v1.DecisionsRequest]) (*connect.Response[v1.DecisionsResponse], error) {
	return c.decisions.CallUnary(ctx, req)
}

// CommanderServiceHandler is an implementation of the proto.server.v1.CommanderService service.
type CommanderServiceHandler interface {
	// Reset resets the state of the generals and commanders
	Reset(context.Context, *connect.Request[v1.EmptyRequest]) (*connect.Response[v1.EmptyResponse], error)
	// IssueCommand sends a command to the generals
	IssueCommand(context.Context, *connect.Request[v1.EmptyRequest]) (*connect.Response[v1.CommandResponse], error)
	// SentCommand sent command is sent by the generals when they send a command to another
	// general, it allows us to track the commands sent and update the UI
	CommandSent(context.Context, *connect.Request[v1.CommandSentRequest]) (*connect.Response[v1.CommandResponse], error)
	// DecisionMade is called when a decision has been made by the generals
	DecisionMade(context.Context, *connect.Request[v1.Decision]) (*connect.Response[v1.EmptyResponse], error)
	// Returns the nodes in the graph, used by the UI
	Nodes(context.Context, *connect.Request[v1.EmptyRequest]) (*connect.Response[v1.NodesResponse], error)
	// Returns the edges in the graph, used by the UI
	Edges(context.Context, *connect.Request[v1.EmptyRequest]) (*connect.Response[v1.EdgesResponse], error)
	// Returns the decisions made by the generals
	Decisions(context.Context, *connect.Request[v1.DecisionsRequest]) (*connect.Response[v1.DecisionsResponse], error)
}

// NewCommanderServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCommanderServiceHandler(svc CommanderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	commanderServiceMethods := v1.File_proto_server_v1_server_proto.Services().ByName("CommanderService").Methods()
	commanderServiceResetHandler := connect.NewUnaryHandler(
		CommanderServiceResetProcedure,
		svc.Reset,
		connect.WithSchema(commanderServiceMethods.ByName("Reset")),
		connect.WithHandlerOptions(opts...),
	)
	commanderServiceIssueCommandHandler := connect.NewUnaryHandler(
		CommanderServiceIssueCommandProcedure,
		svc.IssueCommand,
		connect.WithSchema(commanderServiceMethods.ByName("IssueCommand")),
		connect.WithHandlerOptions(opts...),
	)
	commanderServiceCommandSentHandler := connect.NewUnaryHandler(
		CommanderServiceCommandSentProcedure,
		svc.CommandSent,
		connect.WithSchema(commanderServiceMethods.ByName("CommandSent")),
		connect.WithHandlerOptions(opts...),
	)
	commanderServiceDecisionMadeHandler := connect.NewUnaryHandler(
		CommanderServiceDecisionMadeProcedure,
		svc.DecisionMade,
		connect.WithSchema(commanderServiceMethods.ByName("DecisionMade")),
		connect.WithHandlerOptions(opts...),
	)
	commanderServiceNodesHandler := connect.NewUnaryHandler(
		CommanderServiceNodesProcedure,
		svc.Nodes,
		connect.WithSchema(commanderServiceMethods.ByName("Nodes")),
		connect.WithHandlerOptions(opts...),
	)
	commanderServiceEdgesHandler := connect.NewUnaryHandler(
		CommanderServiceEdgesProcedure,
		svc.Edges,
		connect.WithSchema(commanderServiceMethods.ByName("Edges")),
		connect.WithHandlerOptions(opts...),
	)
	commanderServiceDecisionsHandler := connect.NewUnaryHandler(
		CommanderServiceDecisionsProcedure,
		svc.Decisions,
		connect.WithSchema(commanderServiceMethods.ByName("Decisions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.server.v1.CommanderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CommanderServiceResetProcedure:
			commanderServiceResetHandler.ServeHTTP(w, r)
		case CommanderServiceIssueCommandProcedure:
			commanderServiceIssueCommandHandler.ServeHTTP(w, r)
		case CommanderServiceCommandSentProcedure:
			commanderServiceCommandSentHandler.ServeHTTP(w, r)
		case CommanderServiceDecisionMadeProcedure:
			commanderServiceDecisionMadeHandler.ServeHTTP(w, r)
		case CommanderServiceNodesProcedure:
			commanderServiceNodesHandler.ServeHTTP(w, r)
		case CommanderServiceEdgesProcedure:
			commanderServiceEdgesHandler.ServeHTTP(w, r)
		case CommanderServiceDecisionsProcedure:
			commanderServiceDecisionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCommanderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCommanderServiceHandler struct{}

func (UnimplementedCommanderServiceHandler) Reset(context.Context, *connect.Request[v1.EmptyRequest]) (*connect.Response[v1.EmptyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.server.v1.CommanderService.Reset is not implemented"))
}

func (UnimplementedCommanderServiceHandler) IssueCommand(context.Context, *connect.Request[v1.EmptyRequest]) (*connect.Response[v1.CommandResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.server.v1.CommanderService.IssueCommand is not implemented"))
}

func (UnimplementedCommanderServiceHandler) CommandSent(context.Context, *connect.Request[v1.CommandSentRequest]) (*connect.Response[v1.CommandResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.server.v1.CommanderService.CommandSent is not implemented"))
}

func (UnimplementedCommanderServiceHandler) DecisionMade(context.Context, *connect.Request[v1.Decision]) (*connect.Response[v1.EmptyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.server.v1.CommanderService.DecisionMade is not implemented"))
}

func (UnimplementedCommanderServiceHandler) Nodes(context.Context, *connect.Request[v1.EmptyRequest]) (*connect.Response[v1.NodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.server.v1.CommanderService.Nodes is not implemented"))
}

func (UnimplementedCommanderServiceHandler) Edges(context.Context, *connect.Request[v1.EmptyRequest]) (*connect.Response[v1.EdgesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.server.v1.CommanderService.Edges is not implemented"))
}

func (UnimplementedCommanderServiceHandler) Decisions(context.Context, *connect.Request[v1.DecisionsRequest]) (*connect.Response[v1.DecisionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.server.v1.CommanderService.Decisions is not implemented"))
}
